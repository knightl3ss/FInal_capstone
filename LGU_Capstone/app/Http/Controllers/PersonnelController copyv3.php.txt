<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Personnel;
use Carbon\Carbon;

class PersonnelController extends Controller
{
    public function showIndex()
    {
        $personnels = Personnel::all();  // Fetch all personnel records
        return view('pages.Plantilla.index', compact('personnels'));
    }

    public function store(Request $request)
    {
        $validatedData = $request->validate([
            'office' => 'required',
            'itemNo' => 'required',
            'position' => 'required',
            'salaryGrade' => 'required',
            'authorizedSalary' => 'required',
            'actualSalary' => 'required',
            'step' => 'required',
            'code' => 'required',
            'type' => 'required',
            'level' => 'required',
            'lastName' => 'required',
            'firstName' => 'required',
            'middleName' => 'nullable',
            'dob' => 'required|date',
            'originalAppointment' => 'required|date',
            'lastPromotion' => 'nullable|date',
            'status' => 'required',
        ]);

        // Compute Remarks based on Age
        $dob = Carbon::parse($validatedData['dob']);
        $age = $dob->age;

        if ($age > 60) {
            $validatedData['remarks'] = "retired";
        } elseif ($age == 60) {
            $validatedData['remarks'] = "retirable";
        } else {
            $validatedData['remarks'] = "non-retirable";
        }

        // Set lastPromotion to NULL if empty
        $validatedData['lastPromotion'] = $request->input('lastPromotion') ?: null;

        // Insert Personnel with Remarks
        Personnel::create($validatedData);

        return redirect()->route('Plantilla')->with('success', 'Personnel added successfully!');
    }

    public function filterPersonnel(Request $request)
    {
        $filters = $request->all();
        $currentYear = Carbon::now()->year;

        $personnels = Personnel::query();

        // Apply Filters
        if (isset($filters['office'])) {
            $personnels->where('office', $filters['office']);
        }

        if (isset($filters['service'])) {
            if ($filters['service'] === '1-5') {
                $personnels->whereBetween('service', [1, 5]);
            } elseif ($filters['service'] === '6-10') {
                $personnels->whereBetween('service', [6, 10]);
            } elseif ($filters['service'] === '11+') {
                $personnels->where('service', '>=', 11);
            }
        }

        if (isset($filters['status'])) {
            $personnels->where('status', $filters['status']);
        }

        // Fetch personnel records and assign remarks
        $personnels = $personnels->get()->map(function ($personnel) use ($currentYear) {
            $dob = Carbon::parse($personnel->dob);
            $age = $dob->age;

            if ($age > 60) {
                $personnel->remarks = "retired";
            } elseif ($age == 60) {
                $personnel->remarks = "retirable";
            } else {
                $personnel->remarks = "non-retirable";
            }

            return $personnel;
        });

        // Apply remarks filter if selected
        if (!empty($filters['remarks'])) {
            $personnels = $personnels->filter(fn($personnel) => $personnel->remarks === $filters['remarks'])->values();
        }

        return response()->json(['personnels' => $personnels]);
    }
}
